# this is an example of the Uber API
# as a demonstration of an API spec in YAML
swagger: '2.0'
info:
  title: Spinitron v2
  version: "1.0.0"
  description: Maximum limit is 200. Default limit is 20.
# the domain of the service
host: spinitron.com
# array of all schemes that your API supports
schemes:
  - https
  - http
securityDefinitions:
  Bearer:
    type: apiKey
    name: Authorization
    in: header
# will be prefixed to all paths
basePath: /api
produces:
  - application/json
  - application/xml
tags:
  - name: Persona
  - name: Show
  - name: Playlist
  - name: Spin
paths:
  /personas:
    get:
      summary: Get Personas
      tags:
        - Persona
      security:
        - Bearer: []
      parameters:
        - name: name
          in: query
          type: string
          description: Filter by Persona name
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/page'
        - $ref: '#/parameters/fields'
        - $ref: '#/parameters/expand'
      responses:
        200:
          description: The personas
          schema:
            allOf:
            - $ref: '#/definitions/BaseIndexResponse'
            - type: object
              properties:
                items:
                  type: array
                  items:
                    $ref: '#/definitions/Persona'
  /personas/{id}:
    get:
      summary: Get Persona by id
      tags:
        - Persona
      security:
        - Bearer: []
      parameters:
        - name: id
          in: path
          required: true
          type: integer
        - $ref: '#/parameters/fields'
        - $ref: '#/parameters/expand'
      responses:
        200:
          description: The Persona
          schema:
            $ref: '#/definitions/Persona'
        404:
          description: Persona not found
          schema:
            $ref: "#/definitions/Error"
  /shows:
    get:
      summary: Returns scheduled shows optionally filtered by {start} and/or {end} datetimes
      description: |
        **Terminology**: Spinitron defines a *show* as a radio program. A show can have one or more *schedules*,
        each of which may specify either an *occurence* or a *repetition*, which represents a set of occurences.
        Thus scheduled shows have occurences that, for example, may be displayed in a calendar.

        In the response, `items` is an array of objects representing occurences of scheduled shows.

        You may optionally filter `items` to a datetime *range* by including in the request {start} and/or {end}
        parameters, both of which must be no more than one hour in the past. An occurence starting at {end} is
        included in the reponse.

        `itmes` can include occurences that begin *or* end within the filter range. A show that goes on air before
        {start} appears in `items` if it ends *after* but not *at* {start}. An occurence starting at or before {end}
        is included.

        If the request omits the {start} parameter, the server sets its value to the current time so that the filter
        range's start is always defined. If the request specifies {end} then the requested range is *bounded*,
        otherwise it is *unbounded*.

        For a bounded request, `items` includes *every* occurence of all shows occuring in the range. The only
        difference between objects in `items` representing a given show will be the `start` field value.

        For an unbounded request, `items` includes *only one* occurence per show, specifically, the
        next occurrence after {start} of all shows occuring after {start}.

        Use an unbounded request to get a straight list all shows. Use a bounded request to get a calendar/agenda
        of shows expanded into occurrences by thir shedules and repetitions.

        Objects in `items` are ordered first by `datetime` and then by `id`.
      tags:
        - Show
      security:
        - Bearer: []
      parameters:
        - name: start
          description: |
            The datetime starting from items must be returned. Maximum 1 hour in past.
          in: query
          type: string
          format: date-time
        - name: end
          description: |
            The ending datetime. Maximum 1 hour in past.
          in: query
          type: string
          format: date-time
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/page'
        - $ref: '#/parameters/fields'
        - $ref: '#/parameters/expand'
      responses:
        200:
          description: The shows
          schema:
            allOf:
            - $ref: '#/definitions/BaseIndexResponse'
            - type: object
              properties:
                items:
                  type: array
                  items:
                    $ref: '#/definitions/Show'
        422:
          description: |
            Invalid datetimes in filter: either too old or {end} is less than {start}.
          schema:
            $ref: '#/definitions/Error'
  /shows/{id}:
    get:
      summary: Get a Show by id
      description: |
        The response object represents the next occurence of the show specified by {id}.

        Status 404 is returned if a show with {id} does not exist or if it does but all its scheduled occurences elapsed in the past.
      tags:
        - Show
      security:
        - Bearer: []
      parameters:
        - name: id
          in: path
          required: true
          type: integer
        - $ref: '#/parameters/fields'
        - $ref: '#/parameters/expand'
      responses:
        200:
          description: The Show
          schema:
            $ref: '#/definitions/Show'
        404:
          description: Show not found or too old
          schema:
            $ref: "#/definitions/Error"
  /playlists:
    get:
      summary: Returns playlists optionally filtered by {start} and/or {end} datetimes
      description: |
        Get Playlists optionally filtered by a datetime range.
        Only past Playlists will be returned (with allowed tolerance equals 1 hour in future).

        Ordered chronologically from newest to oldest.
      tags:
        - Playlist
      security:
        - Bearer: []
      parameters:
        - name: start
          description: |
            The datetime starting from items must be returned. Maximum 1 hour in future.
          in: query
          type: string
          format: date-time
        - name: end
          description: |
            The ending datetime. Maximum 1 hour in future.
          in: query
          type: string
          format: date-time
        - name: show_id
          description: Filter by show
          in: query
          type: integer
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/page'
        - $ref: '#/parameters/fields'
        - $ref: '#/parameters/expand'
      responses:
        200:
          description: The playlists
          schema:
            allOf:
            - $ref: '#/definitions/BaseIndexResponse'
            - type: object
              properties:
                items:
                  type: array
                  items:
                    $ref: '#/definitions/Playlist'
  /playlists/{id}:
    get:
      summary: Get a Playlist by id
      description: |
        The response object represents the playlist specified by {id}.

        Status 404 is returned if a playlist with {id} does not exist or if it does but starts in the future (with allowed tolerance equals 1 hour in future).
      tags:
        - Playlist
      security:
        - Bearer: []
      parameters:
        - name: id
          in: path
          required: true
          type: integer
        - $ref: '#/parameters/fields'
        - $ref: '#/parameters/expand'
      responses:
        200:
          description: The playlist
          schema:
            $ref: '#/definitions/Playlist'
        404:
          description: Playlist not found or is in the future
          schema:
            $ref: "#/definitions/Error"
  /spins:
    get:
      summary: Returns spins optionally filtered by {start} and/or {end} datetimes
      description: |
        Get Spins optionally filtered by a datetime range. Only past Spins will be returned.
      tags:
        - Spin
      security:
        - Bearer: []
      parameters:
        - name: start
          description: |
            The datetime starting from items must be returned.
          in: query
          type: string
          format: date-time
        - name: end
          description: |
            The ending datetime.
          in: query
          type: string
          format: date-time
        - name: playlist_id
          description: Filter by playlist
          in: query
          type: integer
        - name: show_id
          description: Filter by show
          in: query
          type: integer
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/page'
        - $ref: '#/parameters/fields'
        - $ref: '#/parameters/expand'
      responses:
        200:
          description: The spins
          schema:
            allOf:
            - $ref: '#/definitions/BaseIndexResponse'
            - type: object
              properties:
                items:
                  type: array
                  items:
                    $ref: '#/definitions/Spin'
    post:
      summary: Log a Spin
      tags:
        - Spin
      description: An endpoint for automation systems to log spins into the spin table.
      security:
        - Bearer: []
      parameters:
        - name: spin_timestamp
          in: formData
          type: string
          format: date-time
        - name: spin_duration
          in: formData
          type: integer
        - name: artist_name
          in: formData
          type: string
          required: true
        - name: release_title
          in: formData
          type: string
        - name: label_name
          in: formData
          type: string
        - name: song_name
          in: formData
          type: string
          required: true
        - name: song_composer
          in: formData
          type: string
        - name: song_isrc
          in: formData
          type: string
      responses:
        201:
          description: The new created Spin.
          schema:
            $ref: '#/definitions/Spin'
        422:
          description: Validation failed.
          schema:
            type: array
            items:
              $ref: '#/definitions/ValidationError'
        default:
          description: Failed to create the object for unknown reason.
          schema:
            $ref: '#/definitions/Error'

  /spins/{id}:
    get:
      summary: Get a Spin by id
      tags:
        - Spin
      security:
        - Bearer: []
      parameters:
        - name: id
          in: path
          required: true
          type: integer
        - $ref: '#/parameters/fields'
        - $ref: '#/parameters/expand'
      responses:
        200:
          description: The spin
          schema:
            $ref: '#/definitions/Spin'
        404:
          description: Spin not found
          schema:
            $ref: "#/definitions/Error"
parameters:
  limit:
    name: count
    description: Amount of items to return
    in: query
    type: integer
    default: 20
    minimum: 1
  page:
    name: page
    description: Offset, used together with count
    in: query
    type: integer
    minimum: 1
  fields:
    name: fields
    description: Allows to select only needed fields
    in: query
    type: array
    items:
      type: string
  expand:
    name: expand
    description: Allows to select extra fields
    in: query
    type: array
    items:
      type: string
definitions:
  Persona:
    type: object
    properties:
      id:
        type: integer
      name:
        type: string
      bio:
        type: string
      since:
        type: string
        format: integer
        description: Year
      email:
        type: string
      website:
        type: string
      image:
        type: string
      _links:
        type: object
        properties:
          self:
            $ref: '#/definitions/Link'
          shows:
            type: array
            items:
              $ref: '#/definitions/Link'
  Show:
    type: object
    properties:
      id:
        type: integer
      start:
        type: string
        format: date-time
        description: UTC datetime, ISO-8601.
      end:
        type: string
        format: date-time
        description: UTC datetime, ISO-8601.
      duration:
        type: integer
        description: Duration in seconds
      timezone:
        type: string
        example: America/Chicago
      category:
        type: string
      title:
        type: string
      description:
        type: string
      since:
        type: string
        format: integer
        description: Year
      url:
        type: string
      hide_dj:
        type: boolean
      image:
        type: string
      _links:
        type: object
        properties:
          self:
            $ref: '#/definitions/Link'
          personas:
            type: array
            items:
              $ref: '#/definitions/Link'
          playlists:
            type: array
            items:
              $ref: '#/definitions/Link'
  Playlist:
    type: object
    properties:
      id:
        type: integer
      persona_id:
        type: integer
      show_id:
        type: integer
      start:
        type: string
        format: date-time
        description: UTC datetime, ISO-8601.
      end:
        type: string
        format: date-time
        description: UTC datetime, ISO-8601.
      duration:
        type: integer
        description: Duration in seconds
      timezone:
        type: string
        example: America/Chicago
      category:
        type: string
      title:
        type: string
      description:
        type: string
      since:
        type: string
        format: date
      url:
        type: string
      hide_dj:
        type: boolean
      image:
        type: string
      automation:
        type: boolean
      episode_name:
        type: string
      episode_description:
        type: string
      _links:
        type: object
        properties:
          self:
            $ref: '#/definitions/Link'
          persona:
            $ref: '#/definitions/Link'
          show:
            $ref: '#/definitions/Link'
  Spin:
    type: object
    properties:
      id:
        type: integer
      playlist_id:
        type: integer
      start:
        type: string
        format: date-time
        description: UTC datetime, ISO-8601.
      end:
        type: string
        format: date-time
        description: UTC datetime, ISO-8601.
      duration:
        type: integer
        description: Duration in seconds
      timezone:
        type: string
        example: America/Chicago
      artist:
        type: string
      release:
        type: string
      label:
        type: string
      song:
        type: string
      composer:
        type: string
      isrc:
        type: string
      note:
        type: string
      genre:
        type: string
      _links:
        type: object
        properties:
          self:
            $ref: '#/definitions/Link'
          playlist:
            $ref: '#/definitions/Link'
  ValidationError:
    type: object
    properties:
      field:
        type: string
      message:
        type: string
  Error:
    type: object
    properties:
      name:
        type: string
      message:
        type: string
      code:
        type: integer
      status:
        type: integer
      type:
        type: string
  Pagination:
    type: object
    properties:
      totalCount:
        type: integer
      pageCount:
        type: integer
      currentPage:
        type: integer
      perPage:
        type: integer
  Link:
    type: object
    properties:
      href:
        type: string
  BaseIndexResponse:
    type: object
    properties:
      _links:
        type: object
        properties:
          self:
            $ref: '#/definitions/Link'
      _meta:
        $ref: '#/definitions/Pagination'
